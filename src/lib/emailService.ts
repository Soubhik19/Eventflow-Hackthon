import emailjs from '@emailjs/browser';

// Email service for sending certificates
export interface EmailData {
  to: string;
  participantName: string;
  eventTitle: string;
  certificateId: string;
  verificationUrl: string;
}

// EmailJS Configuration (you'll need to set these up)
const EMAILJS_CONFIG = {
  SERVICE_ID: import.meta.env.VITE_EMAILJS_SERVICE_ID || 'your_service_id',
  TEMPLATE_ID: import.meta.env.VITE_EMAILJS_TEMPLATE_ID || 'your_template_id',
  PUBLIC_KEY: import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'your_public_key',
};

// Simple email template
export const generateEmailTemplate = (data: EmailData): string => {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Your Certificate - ${data.eventTitle}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #22c55e;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .title {
            color: #22c55e;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }
        .content {
            line-height: 1.6;
            color: #333;
        }
        .highlight {
            background-color: #f0fdf4;
            padding: 15px;
            border-left: 4px solid #22c55e;
            margin: 20px 0;
        }
        .button {
            display: inline-block;
            background-color: #22c55e;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
            margin: 20px 0;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üéâ Congratulations!</h1>
            <p>Your certificate is ready</p>
        </div>
        
        <div class="content">
            <p>Dear <strong>${data.participantName}</strong>,</p>
            
            <p>Congratulations on successfully completing <strong>${data.eventTitle}</strong>!</p>
            
            <div class="highlight">
                <strong>üìã Certificate Details:</strong><br>
                ‚Ä¢ Event: ${data.eventTitle}<br>
                ‚Ä¢ Participant: ${data.participantName}<br>
                ‚Ä¢ Certificate ID: ${data.certificateId}<br>
                ‚Ä¢ Verification Available: Yes
            </div>
            
            <p>Your certificate has been generated and is attached to this email. You can also verify your certificate online anytime using the link below:</p>
            
            <div style="text-align: center;">
                <a href="${data.verificationUrl}" class="button">üîç Verify Certificate Online</a>
            </div>
            
            <p><strong>What you can do with your certificate:</strong></p>
            <ul>
                <li>üìÅ Save the PDF to your computer</li>
                <li>üñ®Ô∏è Print a physical copy</li>
                <li>üì± Share the verification URL</li>
                <li>üìã Add to your portfolio or resume</li>
            </ul>
            
            <p>The QR code on your certificate can be scanned to instantly verify its authenticity.</p>
        </div>
        
        <div class="footer">
            <p>This certificate was generated by EventFlow<br>
            Automated Certificate Generation System</p>
            <p style="font-size: 12px;">
                Questions? Contact the event organizer or visit our verification portal.
            </p>
        </div>
    </div>
</body>
</html>
  `;
};

// Send email using EmailJS
export const sendCertificateEmail = async (
  emailData: EmailData,
  certificateBlob?: Blob
): Promise<boolean> => {
  try {
    // Initialize EmailJS if not already done
    if (!emailjs.init) {
      emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
    }

    // Prepare email template parameters
    const templateParams = {
      to_email: emailData.to,
      participant_name: emailData.participantName,
      event_title: emailData.eventTitle,
      certificate_id: emailData.certificateId,
      verification_url: emailData.verificationUrl,
      message: `
Dear ${emailData.participantName},

Congratulations on successfully completing ${emailData.eventTitle}!

Your certificate has been generated with the following details:
- Certificate ID: ${emailData.certificateId}
- Event: ${emailData.eventTitle}
- Verification URL: ${emailData.verificationUrl}

You can verify your certificate anytime using the QR code or the verification link above.

Best regards,
EventFlow Team
      `
    };

    // Send email using EmailJS
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID,
      templateParams
    );

    console.log('Email sent successfully:', response);
    return true;

  } catch (error) {
    console.error('Error sending email:', error);
    // Fallback to mailto if EmailJS fails
    const subject = `Your Certificate - ${emailData.eventTitle}`;
    const body = `
Dear ${emailData.participantName},

Congratulations on completing ${emailData.eventTitle}!

Certificate ID: ${emailData.certificateId}
Verify at: ${emailData.verificationUrl}

Best regards,
EventFlow Team
    `;
    
    const mailtoLink = `mailto:${emailData.to}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.open(mailtoLink);
    
    return false; // Indicate fallback was used
  }
};

// Test EmailJS configuration with a simple email
export const testEmailJSConfiguration = async (): Promise<boolean> => {
  try {
    // Check if EmailJS is configured
    const isConfigured = 
      EMAILJS_CONFIG.SERVICE_ID !== 'your_service_id' &&
      EMAILJS_CONFIG.TEMPLATE_ID !== 'your_template_id' &&
      EMAILJS_CONFIG.PUBLIC_KEY !== 'your_public_key' &&
      EMAILJS_CONFIG.SERVICE_ID.trim() !== '' &&
      EMAILJS_CONFIG.TEMPLATE_ID.trim() !== '' &&
      EMAILJS_CONFIG.PUBLIC_KEY.trim() !== '';

    if (!isConfigured) {
      console.error('‚ùå EmailJS not configured properly');
      return false;
    }

    console.log('üß™ Testing EmailJS configuration...');
    
    // Initialize EmailJS
    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
    
    // Test with minimal data
    const testParams = {
      to_name: 'Test User',
      to_email: 'test@example.com',
      from_name: 'EventFlow Team',
      subject: 'Test Email',
      event_name: 'Test Event',
      certificate_id: 'TEST123',
      verification_url: 'https://example.com/verify',
      reply_to: 'noreply@eventflow.com'
    };
    
    console.log('üì§ Sending test email with params:', testParams);
    
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID,
      testParams
    );
    
    console.log('‚úÖ Test email sent successfully:', response);
    return true;
    
  } catch (error: any) {
    console.error('‚ùå EmailJS test failed:', error);
    console.error('Status:', error.status);
    console.error('Text:', error.text);
    console.error('Message:', error.message);
    return false;
  }
};

// Main function to send bulk emails - handles both automated and manual methods
export const sendBulkCertificateEmails = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  
  // Check if EmailJS is properly configured
  const isEmailJSConfigured = 
    EMAILJS_CONFIG.SERVICE_ID !== 'your_service_id' &&
    EMAILJS_CONFIG.TEMPLATE_ID !== 'your_template_id' &&
    EMAILJS_CONFIG.PUBLIC_KEY !== 'your_public_key' &&
    EMAILJS_CONFIG.SERVICE_ID.trim() !== '' &&
    EMAILJS_CONFIG.TEMPLATE_ID.trim() !== '' &&
    EMAILJS_CONFIG.PUBLIC_KEY.trim() !== '';

  if (isEmailJSConfigured) {
    console.log('üöÄ EmailJS is configured! Sending automated emails...');
    return await sendAutomatedEmails(participants, eventTitle, onProgress);
  } else {
    console.warn('‚ö†Ô∏è EmailJS not configured. Using manual mailto method.');
    console.log('üí° To enable automated emails, set up EmailJS in your .env file');
    return await sendBulkMailtoEmails(participants, eventTitle, onProgress);
  }
};

// NEW: Fully automated email sending using EmailJS (no manual clicks required)
const sendAutomatedEmails = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  
  let success = 0;
  let failed = 0;
  
  console.log(`üìß Starting automated email delivery to ${participants.length} participants...`);
  
  // Initialize EmailJS with public key
  try {
    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
    console.log('‚úÖ EmailJS initialized successfully');
  } catch (error) {
    console.error('‚ùå Failed to initialize EmailJS:', error);
    throw new Error('EmailJS initialization failed');
  }
  
  // Send individual emails automatically
  for (let i = 0; i < participants.length; i++) {
    try {
      const participant = participants[i];
      const verificationUrl = `${window.location.origin}/verify?id=${participant.certificateHash}`;
      const certificateId = participant.certificateHash.substring(0, 8).toUpperCase();
      
      console.log(`üì§ Sending email ${i + 1}/${participants.length} to ${participant.name} (${participant.email})`);
      console.log(`üîç Certificate ID: ${certificateId}`);
      console.log(`üîó Verification URL: ${verificationUrl}`);
      
      // Simplified template parameters for EmailJS
      const templateParams = {
        to_name: participant.name,
        to_email: participant.email,
        from_name: "EventFlow Team",
        subject: `Your Certificate - ${eventTitle}`,
        event_name: eventTitle,
        participant_name: participant.name,
        certificate_id: certificateId,
        verification_url: verificationUrl,
        reply_to: "noreply@eventflow.com"
      };
      
      console.log('üìã Template params:', templateParams);
      console.log('üîß EmailJS Config:', {
        serviceId: EMAILJS_CONFIG.SERVICE_ID,
        templateId: EMAILJS_CONFIG.TEMPLATE_ID,
        publicKey: EMAILJS_CONFIG.PUBLIC_KEY ? 'SET' : 'NOT SET'
      });
      
      // Send email using EmailJS
      const response = await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams
      );
      
      console.log(`‚úÖ Email sent successfully to ${participant.name}:`, response.status, response.text);
      success++;
      
      // Update progress
      if (onProgress) {
        onProgress(Math.round(((i + 1) / participants.length) * 100));
      }
      
      // Add delay between emails to avoid rate limiting (EmailJS allows 200 emails/month on free plan)
      if (i < participants.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay
      }
      
    } catch (error: any) {
      console.error(`‚ùå Failed to send email to ${participants[i]?.name}:`, error);
      
      // Enhanced error logging for debugging
      if (error.status) {
        console.error(`üìä EmailJS Error Status: ${error.status}`);
      }
      if (error.text) {
        console.error(`üìÑ EmailJS Error Message: ${error.text}`);
      }
      if (error.message) {
        console.error(`üí¨ Error Details: ${error.message}`);
      }
      
      // Log what we tried to send for debugging
      console.error('üîç Debug Info:', {
        participant: participants[i]?.name,
        email: participants[i]?.email,
        serviceId: EMAILJS_CONFIG.SERVICE_ID,
        templateId: EMAILJS_CONFIG.TEMPLATE_ID,
        publicKeySet: !!EMAILJS_CONFIG.PUBLIC_KEY
      });
      
      failed++;
      
      // Continue with next email even if one fails
      if (onProgress) {
        onProgress(Math.round(((i + 1) / participants.length) * 100));
      }
    }
  }
  
  console.log(`üìä Email delivery complete: ${success} sent, ${failed} failed`);
  return { success, failed };
};

// Send bulk emails using mailto (opens multiple email drafts)
const sendBulkMailtoEmails = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  
  // Show user choice for email method
  const userChoice = confirm(
    `Choose email method:\n\n` +
    `OK = Send individual personalized emails to each participant (${participants.length} separate emails)\n` +
    `Cancel = Send one BCC email to all participants\n\n` +
    `Recommended: Individual emails for better personalization`
  );

  if (!userChoice) {
    // Option 1: Single BCC email with all details
    return await sendSingleBCCEmail(participants, eventTitle, onProgress);
  } else {
    // Option 2: Individual personalized emails (RECOMMENDED)
    return await sendIndividualPersonalizedEmails(participants, eventTitle, onProgress);
  }
};

// Send individual personalized emails to each participant
const sendIndividualPersonalizedEmails = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  
  console.log(`üìß Preparing ${participants.length} individual personalized emails...`);
  
  // Prepare individual emails for each participant
  const individualEmails = participants.map(participant => {
    const verificationUrl = `${window.location.origin}/verify?id=${participant.certificateHash}`;
    const certificateId = participant.certificateHash.substring(0, 8).toUpperCase();
    
    const subject = `üéâ Your Certificate - ${eventTitle}`;
    const body = `Dear ${participant.name},

üéâ Congratulations on successfully completing ${eventTitle}!

Your personal certificate has been generated with the following unique details:

üìã YOUR CERTIFICATE DETAILS:
‚Ä¢ Certificate ID: ${certificateId}
‚Ä¢ Verification URL: ${verificationUrl}
‚Ä¢ QR Code: Embedded in your PDF certificate

üì• How to access your certificate:
1. Download the certificates ZIP file from the event page
2. Find your personal PDF: "${participant.name.replace(/[^a-zA-Z0-9]/g, '_')}_Certificate.pdf"
3. Your certificate includes a unique QR code for instant verification

üì± QR Code Features:
‚Ä¢ Scan the QR code on your certificate for instant verification
‚Ä¢ The QR code is unique to your certificate only
‚Ä¢ Links directly to your personal verification page

üîó Manual Verification:
You can also verify your certificate anytime at:
${verificationUrl}

üìû Questions? Contact the event organizer.

Best regards,
EventFlow Team

---
This certificate is unique to ${participant.name} and cannot be used by anyone else.`;
    
    return {
      to: participant.email,
      name: participant.name,
      subject: subject,
      body: body,
      mailto: `mailto:${participant.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`
    };
  });

  // Open individual emails with delays to avoid overwhelming the browser
  console.log(`üöÄ Opening ${individualEmails.length} individual email clients...`);
  
  for (let i = 0; i < individualEmails.length; i++) {
    setTimeout(() => {
      const email = individualEmails[i];
      console.log(`üìß Opening email for ${email.name} (${email.to})`);
      window.open(email.mailto);
      
      if (onProgress) {
        onProgress(Math.round(((i + 1) / individualEmails.length) * 100));
      }
    }, i * 800); // 800ms delay between each email to avoid browser blocking
  }
  
  return { success: participants.length, failed: 0 };
};

// Send single BCC email with all details
const sendSingleBCCEmail = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  
  // Create a single email with all recipients in BCC
  const allEmails = participants.map(p => p.email).join(',');
  const subject = `Your Certificate - ${eventTitle}`;
  
  // Create individual certificate details for each participant
  const certificateList = participants.map(participant => {
    const verificationUrl = `${window.location.origin}/verify?id=${participant.certificateHash}`;
    const certId = participant.certificateHash.substring(0, 8).toUpperCase();
    return `
üìã ${participant.name} (${participant.email}):
   ‚Ä¢ Certificate ID: ${certId}
   ‚Ä¢ Verification URL: ${verificationUrl}
   ‚Ä¢ QR Code: Included in PDF certificate`;
  }).join('\n');

  const body = `
Dear Participants,

üéâ Congratulations on successfully completing ${eventTitle}!

Your certificates have been generated with unique details for each participant:

${certificateList}

üì• How to get your certificate:
1. Download the certificates ZIP file from the event page
2. Find your individual PDF certificate (named with your name)
3. Your certificate includes a unique QR code for verification
4. Use the verification URL above to verify your certificate anytime

üì± QR Code Instructions:
- Each certificate has a unique QR code
- Scan the QR code to instantly verify your certificate
- The QR code links to your personal verification page

üìû Questions? Contact the event organizer.

Best regards,
EventFlow Team
  `;

  // Single email with all recipients in BCC
  const bulkMailtoLink = `mailto:?bcc=${encodeURIComponent(allEmails)}&subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  
  console.log('üìß Opening single BCC email with all participants...');
  window.open(bulkMailtoLink);
  
  if (onProgress) onProgress(100);
  return { success: participants.length, failed: 0 };
};