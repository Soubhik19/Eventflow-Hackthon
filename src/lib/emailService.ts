import emailjs from '@emailjs/browser';

// Email service for sending certificates
export interface EmailData {
  to: string;
  participantName: string;
  eventTitle: string;
  certificateId: string;
  verificationUrl: string;
}

// EmailJS Configuration (you'll need to set these up)
const EMAILJS_CONFIG = {
  SERVICE_ID: import.meta.env.VITE_EMAILJS_SERVICE_ID || 'your_service_id',
  TEMPLATE_ID: import.meta.env.VITE_EMAILJS_TEMPLATE_ID || 'your_template_id',
  PUBLIC_KEY: import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'your_public_key',
};

// Simple email template
export const generateEmailTemplate = (data: EmailData): string => {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Your Certificate - ${data.eventTitle}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #22c55e;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .title {
            color: #22c55e;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }
        .content {
            line-height: 1.6;
            color: #333;
        }
        .highlight {
            background-color: #f0fdf4;
            padding: 15px;
            border-left: 4px solid #22c55e;
            margin: 20px 0;
        }
        .button {
            display: inline-block;
            background-color: #22c55e;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
            margin: 20px 0;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üéâ Congratulations!</h1>
            <p>Your certificate is ready</p>
        </div>
        
        <div class="content">
            <p>Dear <strong>${data.participantName}</strong>,</p>
            
            <p>Congratulations on successfully completing <strong>${data.eventTitle}</strong>!</p>
            
            <div class="highlight">
                <strong>üìã Certificate Details:</strong><br>
                ‚Ä¢ Event: ${data.eventTitle}<br>
                ‚Ä¢ Participant: ${data.participantName}<br>
                ‚Ä¢ Certificate ID: ${data.certificateId}<br>
                ‚Ä¢ Verification Available: Yes
            </div>
            
            <p>Your certificate has been generated and is attached to this email. You can also verify your certificate online anytime using the link below:</p>
            
            <div style="text-align: center;">
                <a href="${data.verificationUrl}" class="button">üîç Verify Certificate Online</a>
            </div>
            
            <p><strong>What you can do with your certificate:</strong></p>
            <ul>
                <li>üìÅ Save the PDF to your computer</li>
                <li>üñ®Ô∏è Print a physical copy</li>
                <li>üì± Share the verification URL</li>
                <li>üìã Add to your portfolio or resume</li>
            </ul>
            
            <p>The QR code on your certificate can be scanned to instantly verify its authenticity.</p>
        </div>
        
        <div class="footer">
            <p>This certificate was generated by EventFlow<br>
            Automated Certificate Generation System</p>
            <p style="font-size: 12px;">
                Questions? Contact the event organizer or visit our verification portal.
            </p>
        </div>
    </div>
</body>
</html>
  `;
};

// Send email using EmailJS
export const sendCertificateEmail = async (
  emailData: EmailData,
  certificateBlob?: Blob
): Promise<boolean> => {
  try {
    // Initialize EmailJS if not already done
    if (!emailjs.init) {
      emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
    }

    // Prepare email template parameters
    const templateParams = {
      to_email: emailData.to,
      participant_name: emailData.participantName,
      event_title: emailData.eventTitle,
      certificate_id: emailData.certificateId,
      verification_url: emailData.verificationUrl,
      message: `
Dear ${emailData.participantName},

Congratulations on successfully completing ${emailData.eventTitle}!

Your certificate has been generated with the following details:
- Certificate ID: ${emailData.certificateId}
- Event: ${emailData.eventTitle}
- Verification URL: ${emailData.verificationUrl}

You can verify your certificate anytime using the QR code or the verification link above.

Best regards,
EventFlow Team
      `
    };

    // Send email using EmailJS
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID,
      templateParams
    );

    console.log('Email sent successfully:', response);
    return true;

  } catch (error) {
    console.error('Error sending email:', error);
    // Fallback to mailto if EmailJS fails
    const subject = `Your Certificate - ${emailData.eventTitle}`;
    const body = `
Dear ${emailData.participantName},

Congratulations on completing ${emailData.eventTitle}!

Certificate ID: ${emailData.certificateId}
Verify at: ${emailData.verificationUrl}

Best regards,
EventFlow Team
    `;
    
    const mailtoLink = `mailto:${emailData.to}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.open(mailtoLink);
    
    return false; // Indicate fallback was used
  }
};

// Batch send emails to all participants
export const sendBulkCertificateEmails = async (
  participants: Array<{ name: string; email: string; certificateHash: string }>,
  eventTitle: string,
  onProgress?: (progress: number) => void
): Promise<{ success: number; failed: number }> => {
  let success = 0;
  let failed = 0;
  
  // Check if EmailJS is configured
  const isEmailJSConfigured = 
    EMAILJS_CONFIG.SERVICE_ID !== 'your_service_id' &&
    EMAILJS_CONFIG.TEMPLATE_ID !== 'your_template_id' &&
    EMAILJS_CONFIG.PUBLIC_KEY !== 'your_public_key';

  if (!isEmailJSConfigured) {
    console.warn('EmailJS not configured. Using fallback mailto method.');
  }
  
  for (let i = 0; i < participants.length; i++) {
    try {
      const participant = participants[i];
      const verificationUrl = `${window.location.origin}/verify?id=${participant.certificateHash}`;
      
      const emailData: EmailData = {
        to: participant.email,
        participantName: participant.name,
        eventTitle: eventTitle,
        certificateId: participant.certificateHash.substring(0, 8).toUpperCase(),
        verificationUrl: verificationUrl
      };
      
      if (isEmailJSConfigured) {
        // Use EmailJS if configured
        const emailSent = await sendCertificateEmail(emailData);
        if (emailSent) {
          success++;
        } else {
          failed++;
        }
      } else {
        // Use mailto fallback
        console.log(`üìß Email prepared for ${participant.name}:`, emailData);
        await sendCertificateEmail(emailData);
        success++; // Count as success since mailto was opened
      }
      
      if (onProgress) {
        onProgress(Math.round(((i + 1) / participants.length) * 100));
      }
      
      // Add delay between emails to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, isEmailJSConfigured ? 1000 : 100));
      
    } catch (error) {
      console.error(`Failed to send email to ${participants[i]?.name}:`, error);
      failed++;
    }
  }
  
  return { success, failed };
};